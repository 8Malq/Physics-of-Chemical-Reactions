<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Chemical Reaction Physics Simulator</title>
    <style>
        body {
            box-sizing: border-box;
            margin: 0;
            padding: 20px;
            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            min-height: 100vh;
            color: white;
            animation: backgroundShift 10s ease-in-out infinite alternate;
        }
        
        @keyframes backgroundShift {
            0% { background: linear-gradient(135deg, #667eea 0%, #764ba2 100%); }
            50% { background: linear-gradient(135deg, #f093fb 0%, #f5576c 100%); }
            100% { background: linear-gradient(135deg, #4facfe 0%, #00f2fe 100%); }
        }
        
        .container {
            max-width: 1400px;
            margin: 0 auto;
        }
        
        h1 {
            text-align: center;
            margin-bottom: 30px;
            font-size: 2.5rem;
            text-shadow: 2px 2px 4px rgba(0,0,0,0.3);
            animation: titlePulse 2s ease-in-out infinite alternate;
        }
        
        @keyframes titlePulse {
            0% { transform: scale(1); text-shadow: 2px 2px 4px rgba(0,0,0,0.3); }
            100% { transform: scale(1.05); text-shadow: 0 0 20px rgba(255,255,255,0.5); }
        }
        
        .simulation-grid {
            display: grid;
            grid-template-columns: 1fr 1fr;
            gap: 20px;
            margin-bottom: 30px;
        }
        
        .simulation-panel {
            background: rgba(255,255,255,0.1);
            border-radius: 15px;
            padding: 20px;
            backdrop-filter: blur(10px);
            border: 1px solid rgba(255,255,255,0.2);
        }
        
        .panel-title {
            font-size: 1.3rem;
            margin-bottom: 15px;
            text-align: center;
            font-weight: bold;
        }
        
        #moleculeCanvas {
            width: 100%;
            height: 300px;
            background: rgba(0,0,0,0.3);
            border-radius: 10px;
            border: 2px solid rgba(255,255,255,0.3);
        }
        
        #energyCanvas {
            width: 100%;
            height: 300px;
            background: rgba(0,0,0,0.3);
            border-radius: 10px;
            border: 2px solid rgba(255,255,255,0.3);
        }
        
        .controls {
            background: rgba(255,255,255,0.1);
            border-radius: 15px;
            padding: 25px;
            backdrop-filter: blur(10px);
            border: 1px solid rgba(255,255,255,0.2);
            margin-bottom: 20px;
        }
        
        .control-grid {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(250px, 1fr));
            gap: 20px;
        }
        
        .control-group {
            display: flex;
            flex-direction: column;
            gap: 10px;
        }
        
        label {
            font-weight: bold;
            font-size: 1.1rem;
        }
        
        input[type="range"] {
            width: 100%;
            height: 8px;
            border-radius: 5px;
            background: rgba(255,255,255,0.3);
            outline: none;
            -webkit-appearance: none;
        }
        
        input[type="range"]::-webkit-slider-thumb {
            -webkit-appearance: none;
            appearance: none;
            width: 20px;
            height: 20px;
            border-radius: 50%;
            background: #4CAF50;
            cursor: pointer;
            box-shadow: 0 2px 6px rgba(0,0,0,0.3);
        }
        
        input[type="range"]::-moz-range-thumb {
            width: 20px;
            height: 20px;
            border-radius: 50%;
            background: #4CAF50;
            cursor: pointer;
            border: none;
            box-shadow: 0 2px 6px rgba(0,0,0,0.3);
        }
        
        .value-display {
            background: rgba(255,255,255,0.2);
            padding: 8px 12px;
            border-radius: 8px;
            text-align: center;
            font-weight: bold;
            font-size: 1.1rem;
        }
        
        .catalyst-toggle {
            display: flex;
            align-items: center;
            gap: 10px;
            margin-top: 10px;
        }
        
        input[type="checkbox"] {
            width: 20px;
            height: 20px;
            accent-color: #4CAF50;
        }
        
        .stats {
            background: rgba(255,255,255,0.1);
            border-radius: 15px;
            padding: 20px;
            backdrop-filter: blur(10px);
            border: 1px solid rgba(255,255,255,0.2);
        }
        
        .stats-grid {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
            gap: 15px;
        }
        
        .stat-item {
            background: rgba(255,255,255,0.1);
            padding: 15px;
            border-radius: 10px;
            text-align: center;
        }
        
        .stat-value {
            font-size: 1.8rem;
            font-weight: bold;
            color: #4CAF50;
        }
        
        .stat-label {
            font-size: 0.9rem;
            opacity: 0.8;
            margin-top: 5px;
        }
        
        .achievements {
            background: rgba(255,255,255,0.1);
            border-radius: 15px;
            padding: 20px;
            backdrop-filter: blur(10px);
            border: 1px solid rgba(255,255,255,0.2);
            margin-top: 20px;
        }
        
        .achievement-title {
            font-size: 1.3rem;
            font-weight: bold;
            margin-bottom: 15px;
            text-align: center;
        }
        
        .achievement-list {
            display: flex;
            flex-wrap: wrap;
            gap: 10px;
            justify-content: center;
        }
        
        .achievement {
            background: rgba(255,215,0,0.2);
            border: 2px solid #FFD700;
            border-radius: 10px;
            padding: 10px 15px;
            font-size: 0.9rem;
            animation: achievementPop 0.5s ease-out;
            box-shadow: 0 0 15px rgba(255,215,0,0.3);
        }
        
        @keyframes achievementPop {
            0% { transform: scale(0) rotate(180deg); opacity: 0; }
            50% { transform: scale(1.2) rotate(0deg); }
            100% { transform: scale(1) rotate(0deg); opacity: 1; }
        }
        
        .explosion {
            position: absolute;
            pointer-events: none;
            animation: explode 0.6s ease-out forwards;
        }
        
        @keyframes explode {
            0% { transform: scale(0); opacity: 1; }
            50% { transform: scale(1.5); opacity: 0.8; }
            100% { transform: scale(3); opacity: 0; }
        }
        
        .particle-trail {
            position: absolute;
            width: 3px;
            height: 3px;
            border-radius: 50%;
            pointer-events: none;
            animation: trail 1s ease-out forwards;
        }
        
        @keyframes trail {
            0% { opacity: 1; transform: scale(1); }
            100% { opacity: 0; transform: scale(0); }
        }
        
        @media (max-width: 768px) {
            .simulation-grid {
                grid-template-columns: 1fr;
            }
            
            .control-grid {
                grid-template-columns: 1fr;
            }
            
            h1 {
                font-size: 2rem;
            }
        }
    </style>
</head>
<body>
    <div class="container">
        <h1>‚öõÔ∏è Chemical Reaction Physics Simulator</h1>
        
        <div class="controls">
            <div class="control-grid">
                <div class="control-group">
                    <label for="temperature">üå°Ô∏è Temperature</label>
                    <input type="range" id="temperature" min="200" max="800" value="400">
                    <div class="value-display" id="tempValue">400 K</div>
                </div>
                
                <div class="control-group">
                    <label for="pressure">üìä Pressure</label>
                    <input type="range" id="pressure" min="1" max="10" value="5" step="0.1">
                    <div class="value-display" id="pressureValue">5.0 atm</div>
                </div>
                
                <div class="control-group">
                    <label>‚ö° Catalyst</label>
                    <div class="catalyst-toggle">
                        <input type="checkbox" id="catalyst">
                        <span>Enable Catalyst</span>
                    </div>
                    <div class="value-display" id="catalystValue">Disabled</div>
                </div>
            </div>
        </div>
        
        <div class="simulation-grid">
            <div class="simulation-panel">
                <div class="panel-title">üî¨ Molecular Collisions</div>
                <canvas id="moleculeCanvas"></canvas>
            </div>
            
            <div class="simulation-panel">
                <div class="panel-title">üìà Energy Diagram</div>
                <canvas id="energyCanvas"></canvas>
            </div>
        </div>
        
        <div class="stats">
            <div class="stats-grid">
                <div class="stat-item">
                    <div class="stat-value" id="reactionRate">0</div>
                    <div class="stat-label">Reactions/sec</div>
                </div>
                <div class="stat-item">
                    <div class="stat-value" id="collisionRate">0</div>
                    <div class="stat-label">Collisions/sec</div>
                </div>
                <div class="stat-item">
                    <div class="stat-value" id="activationEnergy">50</div>
                    <div class="stat-label">Activation Energy (kJ/mol)</div>
                </div>
                <div class="stat-item">
                    <div class="stat-value" id="avgKineticEnergy">0</div>
                    <div class="stat-label">Avg Kinetic Energy (kJ/mol)</div>
                </div>
                <div class="stat-item">
                    <div class="stat-value" id="totalScore">0</div>
                    <div class="stat-label">üèÜ Total Score</div>
                </div>
                <div class="stat-item">
                    <div class="stat-value" id="efficiency">0%</div>
                    <div class="stat-label">‚ö° Efficiency</div>
                </div>
            </div>
        </div>
        
        <div class="achievements" id="achievements">
            <div class="achievement-title">üéØ Achievements</div>
            <div class="achievement-list" id="achievementList"></div>
        </div>
    </div>

    <script>
        class Molecule {
            constructor(x, y, vx, vy, type, canvas) {
                this.x = x;
                this.y = y;
                this.vx = vx;
                this.vy = vy;
                this.type = type; // 'A', 'B', or 'AB'
                this.radius = type === 'AB' ? 8 : 6;
                this.canvas = canvas;
                this.energy = 0.5 * (vx * vx + vy * vy);
            }
            
            update() {
                this.x += this.vx;
                this.y += this.vy;
                
                // Bounce off walls
                if (this.x <= this.radius || this.x >= this.canvas.width - this.radius) {
                    this.vx = -this.vx;
                    this.x = Math.max(this.radius, Math.min(this.canvas.width - this.radius, this.x));
                }
                if (this.y <= this.radius || this.y >= this.canvas.height - this.radius) {
                    this.vy = -this.vy;
                    this.y = Math.max(this.radius, Math.min(this.canvas.height - this.radius, this.y));
                }
                
                this.energy = 0.5 * (this.vx * this.vx + this.vy * this.vy);
            }
            
            draw(ctx) {
                // Add glow effect based on energy
                const glowIntensity = Math.min(this.energy / 10, 1);
                ctx.shadowBlur = 10 + glowIntensity * 20;
                
                if (this.type === 'A') {
                    ctx.fillStyle = '#FF6B6B';
                    ctx.shadowColor = '#FF6B6B';
                } else if (this.type === 'B') {
                    ctx.fillStyle = '#4ECDC4';
                    ctx.shadowColor = '#4ECDC4';
                } else {
                    ctx.fillStyle = '#45B7D1';
                    ctx.shadowColor = '#45B7D1';
                }
                
                ctx.beginPath();
                ctx.arc(this.x, this.y, this.radius, 0, Math.PI * 2);
                ctx.fill();
                
                // Add pulsing effect for high energy molecules
                if (this.energy > 8) {
                    ctx.shadowBlur = 30;
                    ctx.beginPath();
                    ctx.arc(this.x, this.y, this.radius + 2, 0, Math.PI * 2);
                    ctx.stroke();
                }
                
                ctx.shadowBlur = 0;
                ctx.strokeStyle = 'white';
                ctx.lineWidth = 2;
                ctx.stroke();
                
                // Draw type label with fun emojis
                ctx.fillStyle = 'white';
                ctx.font = 'bold 12px Arial';
                ctx.textAlign = 'center';
                const emoji = this.type === 'A' ? 'üî¥' : this.type === 'B' ? 'üîµ' : 'üí´';
                ctx.fillText(emoji, this.x, this.y + 4);
            }
            
            distanceTo(other) {
                const dx = this.x - other.x;
                const dy = this.y - other.y;
                return Math.sqrt(dx * dx + dy * dy);
            }
        }
        
        class ChemicalSimulator {
            constructor() {
                this.moleculeCanvas = document.getElementById('moleculeCanvas');
                this.energyCanvas = document.getElementById('energyCanvas');
                this.molCtx = this.moleculeCanvas.getContext('2d');
                this.energyCtx = this.energyCanvas.getContext('2d');
                
                this.setupCanvases();
                this.molecules = [];
                this.temperature = 400;
                this.pressure = 5;
                this.catalyst = false;
                this.activationEnergy = 50;
                
                this.reactionCount = 0;
                this.collisionCount = 0;
                this.lastTime = Date.now();
                this.totalScore = 0;
                this.achievements = new Set();
                this.explosions = [];
                this.particles = [];
                
                this.initializeMolecules();
                this.setupControls();
                this.setupAchievements();
                this.animate();
            }
            
            setupCanvases() {
                const resizeCanvas = (canvas) => {
                    const rect = canvas.getBoundingClientRect();
                    canvas.width = rect.width;
                    canvas.height = rect.height;
                };
                
                resizeCanvas(this.moleculeCanvas);
                resizeCanvas(this.energyCanvas);
                
                window.addEventListener('resize', () => {
                    resizeCanvas(this.moleculeCanvas);
                    resizeCanvas(this.energyCanvas);
                });
            }
            
            initializeMolecules() {
                this.molecules = [];
                const numMolecules = Math.floor(this.pressure * 8);
                
                for (let i = 0; i < numMolecules; i++) {
                    const type = Math.random() < 0.4 ? 'A' : (Math.random() < 0.7 ? 'B' : 'AB');
                    const speed = Math.sqrt(this.temperature / 100) * 2;
                    const angle = Math.random() * Math.PI * 2;
                    
                    const molecule = new Molecule(
                        Math.random() * (this.moleculeCanvas.width - 40) + 20,
                        Math.random() * (this.moleculeCanvas.height - 40) + 20,
                        Math.cos(angle) * speed,
                        Math.sin(angle) * speed,
                        type,
                        this.moleculeCanvas
                    );
                    
                    this.molecules.push(molecule);
                }
            }
            
            setupControls() {
                const tempSlider = document.getElementById('temperature');
                const pressureSlider = document.getElementById('pressure');
                const catalystCheckbox = document.getElementById('catalyst');
                
                tempSlider.addEventListener('input', (e) => {
                    this.temperature = parseInt(e.target.value);
                    document.getElementById('tempValue').textContent = `${this.temperature} K`;
                    this.updateMoleculeVelocities();
                });
                
                pressureSlider.addEventListener('input', (e) => {
                    this.pressure = parseFloat(e.target.value);
                    document.getElementById('pressureValue').textContent = `${this.pressure.toFixed(1)} atm`;
                    this.initializeMolecules();
                });
                
                catalystCheckbox.addEventListener('change', (e) => {
                    this.catalyst = e.target.checked;
                    this.activationEnergy = this.catalyst ? 25 : 50;
                    document.getElementById('catalystValue').textContent = this.catalyst ? 'Enabled' : 'Disabled';
                    document.getElementById('activationEnergy').textContent = this.activationEnergy;
                });
            }
            
            setupAchievements() {
                this.achievementDefinitions = [
                    { id: 'first_reaction', name: 'üéâ First Reaction!', condition: () => this.totalScore >= 1 },
                    { id: 'speed_demon', name: 'üöÄ Speed Demon', condition: () => this.temperature >= 700 },
                    { id: 'pressure_cooker', name: 'üí• Pressure Cooker', condition: () => this.pressure >= 9 },
                    { id: 'catalyst_master', name: '‚ö° Catalyst Master', condition: () => this.catalyst && this.totalScore >= 50 },
                    { id: 'reaction_factory', name: 'üè≠ Reaction Factory', condition: () => this.totalScore >= 100 },
                    { id: 'efficiency_expert', name: 'üéØ Efficiency Expert', condition: () => this.getEfficiency() >= 80 },
                    { id: 'molecular_mayhem', name: 'üå™Ô∏è Molecular Mayhem', condition: () => this.molecules.length >= 60 },
                    { id: 'energy_master', name: '‚ö° Energy Master', condition: () => this.totalScore >= 500 }
                ];
            }
            
            checkAchievements() {
                this.achievementDefinitions.forEach(achievement => {
                    if (!this.achievements.has(achievement.id) && achievement.condition()) {
                        this.unlockAchievement(achievement);
                    }
                });
            }
            
            unlockAchievement(achievement) {
                this.achievements.add(achievement.id);
                const achievementElement = document.createElement('div');
                achievementElement.className = 'achievement';
                achievementElement.textContent = achievement.name;
                document.getElementById('achievementList').appendChild(achievementElement);
                
                // Add bonus score for achievements
                this.totalScore += 25;
                
                // Create celebration effect
                this.createCelebration();
            }
            
            createCelebration() {
                for (let i = 0; i < 20; i++) {
                    setTimeout(() => {
                        this.createParticle(
                            Math.random() * this.moleculeCanvas.width,
                            Math.random() * this.moleculeCanvas.height,
                            '#FFD700'
                        );
                    }, i * 50);
                }
            }
            
            createExplosion(x, y) {
                this.explosions.push({
                    x: x,
                    y: y,
                    time: Date.now(),
                    duration: 600
                });
                
                // Create particles
                for (let i = 0; i < 8; i++) {
                    const angle = (i / 8) * Math.PI * 2;
                    this.createParticle(x, y, '#FFD700', angle);
                }
            }
            
            createParticle(x, y, color, angle = null) {
                if (angle === null) angle = Math.random() * Math.PI * 2;
                const speed = 2 + Math.random() * 3;
                
                this.particles.push({
                    x: x,
                    y: y,
                    vx: Math.cos(angle) * speed,
                    vy: Math.sin(angle) * speed,
                    color: color,
                    life: 1,
                    decay: 0.02 + Math.random() * 0.02
                });
            }
            
            getEfficiency() {
                if (this.collisionCount === 0) return 0;
                return Math.min(100, (this.reactionCount / this.collisionCount) * 100);
            }
            
            updateMoleculeVelocities() {
                const speed = Math.sqrt(this.temperature / 100) * 2;
                this.molecules.forEach(molecule => {
                    const currentSpeed = Math.sqrt(molecule.vx * molecule.vx + molecule.vy * molecule.vy);
                    const ratio = speed / currentSpeed;
                    molecule.vx *= ratio;
                    molecule.vy *= ratio;
                });
            }
            
            checkCollisions() {
                for (let i = 0; i < this.molecules.length; i++) {
                    for (let j = i + 1; j < this.molecules.length; j++) {
                        const mol1 = this.molecules[i];
                        const mol2 = this.molecules[j];
                        const distance = mol1.distanceTo(mol2);
                        
                        if (distance < mol1.radius + mol2.radius) {
                            this.collisionCount++;
                            
                            // Check for reaction
                            if ((mol1.type === 'A' && mol2.type === 'B') || 
                                (mol1.type === 'B' && mol2.type === 'A')) {
                                
                                const combinedEnergy = mol1.energy + mol2.energy;
                                const energyThreshold = this.activationEnergy / 10;
                                
                                if (combinedEnergy > energyThreshold) {
                                    this.reactionCount++;
                                    this.totalScore += Math.floor(combinedEnergy);
                                    
                                    // Create explosion effect
                                    this.createExplosion((mol1.x + mol2.x) / 2, (mol1.y + mol2.y) / 2);
                                    
                                    // Create product molecule
                                    const newMol = new Molecule(
                                        (mol1.x + mol2.x) / 2,
                                        (mol1.y + mol2.y) / 2,
                                        (mol1.vx + mol2.vx) / 2,
                                        (mol1.vy + mol2.vy) / 2,
                                        'AB',
                                        this.moleculeCanvas
                                    );
                                    
                                    // Remove reactants and add product
                                    this.molecules.splice(Math.max(i, j), 1);
                                    this.molecules.splice(Math.min(i, j), 1);
                                    this.molecules.push(newMol);
                                    break;
                                }
                            }
                            
                            // Elastic collision
                            const dx = mol2.x - mol1.x;
                            const dy = mol2.y - mol1.y;
                            const angle = Math.atan2(dy, dx);
                            
                            const sin = Math.sin(angle);
                            const cos = Math.cos(angle);
                            
                            // Rotate velocities
                            const vx1 = mol1.vx * cos + mol1.vy * sin;
                            const vy1 = mol1.vy * cos - mol1.vx * sin;
                            const vx2 = mol2.vx * cos + mol2.vy * sin;
                            const vy2 = mol2.vy * cos - mol2.vx * sin;
                            
                            // Swap x velocities
                            const temp = vx1;
                            const newVx1 = vx2;
                            const newVx2 = temp;
                            
                            // Rotate back
                            mol1.vx = newVx1 * cos - vy1 * sin;
                            mol1.vy = vy1 * cos + newVx1 * sin;
                            mol2.vx = newVx2 * cos - vy2 * sin;
                            mol2.vy = vy2 * cos + newVx2 * sin;
                            
                            // Separate molecules
                            const overlap = mol1.radius + mol2.radius - distance;
                            const separateX = cos * overlap * 0.5;
                            const separateY = sin * overlap * 0.5;
                            
                            mol1.x -= separateX;
                            mol1.y -= separateY;
                            mol2.x += separateX;
                            mol2.y += separateY;
                        }
                    }
                }
            }
            
            drawMolecules() {
                this.molCtx.clearRect(0, 0, this.moleculeCanvas.width, this.moleculeCanvas.height);
                
                // Draw background grid
                this.molCtx.strokeStyle = 'rgba(255,255,255,0.1)';
                this.molCtx.lineWidth = 1;
                for (let x = 0; x < this.moleculeCanvas.width; x += 30) {
                    this.molCtx.beginPath();
                    this.molCtx.moveTo(x, 0);
                    this.molCtx.lineTo(x, this.moleculeCanvas.height);
                    this.molCtx.stroke();
                }
                for (let y = 0; y < this.moleculeCanvas.height; y += 30) {
                    this.molCtx.beginPath();
                    this.molCtx.moveTo(0, y);
                    this.molCtx.lineTo(this.moleculeCanvas.width, y);
                    this.molCtx.stroke();
                }
                
                this.molecules.forEach(molecule => {
                    molecule.draw(this.molCtx);
                });
                
                // Draw explosions
                const currentTime = Date.now();
                this.explosions = this.explosions.filter(explosion => {
                    const age = currentTime - explosion.time;
                    if (age > explosion.duration) return false;
                    
                    const progress = age / explosion.duration;
                    const radius = progress * 30;
                    const opacity = 1 - progress;
                    
                    this.molCtx.save();
                    this.molCtx.globalAlpha = opacity;
                    this.molCtx.strokeStyle = '#FFD700';
                    this.molCtx.lineWidth = 3;
                    this.molCtx.beginPath();
                    this.molCtx.arc(explosion.x, explosion.y, radius, 0, Math.PI * 2);
                    this.molCtx.stroke();
                    
                    // Inner explosion
                    this.molCtx.strokeStyle = '#FF6B6B';
                    this.molCtx.lineWidth = 2;
                    this.molCtx.beginPath();
                    this.molCtx.arc(explosion.x, explosion.y, radius * 0.6, 0, Math.PI * 2);
                    this.molCtx.stroke();
                    this.molCtx.restore();
                    
                    return true;
                });
                
                // Draw particles
                this.particles = this.particles.filter(particle => {
                    particle.x += particle.vx;
                    particle.y += particle.vy;
                    particle.life -= particle.decay;
                    
                    if (particle.life <= 0) return false;
                    
                    this.molCtx.save();
                    this.molCtx.globalAlpha = particle.life;
                    this.molCtx.fillStyle = particle.color;
                    this.molCtx.beginPath();
                    this.molCtx.arc(particle.x, particle.y, 2, 0, Math.PI * 2);
                    this.molCtx.fill();
                    this.molCtx.restore();
                    
                    return true;
                });
            }
            
            drawEnergyDiagram() {
                const ctx = this.energyCtx;
                const width = this.energyCanvas.width;
                const height = this.energyCanvas.height;
                
                ctx.clearRect(0, 0, width, height);
                
                // Draw axes
                ctx.strokeStyle = 'white';
                ctx.lineWidth = 2;
                ctx.beginPath();
                ctx.moveTo(50, height - 50);
                ctx.lineTo(width - 20, height - 50);
                ctx.moveTo(50, height - 50);
                ctx.lineTo(50, 20);
                ctx.stroke();
                
                // Labels
                ctx.fillStyle = 'white';
                ctx.font = '14px Arial';
                ctx.textAlign = 'center';
                ctx.fillText('Reaction Progress', width / 2, height - 10);
                
                ctx.save();
                ctx.translate(15, height / 2);
                ctx.rotate(-Math.PI / 2);
                ctx.fillText('Energy', 0, 0);
                ctx.restore();
                
                // Draw energy curve
                const startY = height - 100;
                const endY = height - 80;
                const peakY = height - 50 - (this.activationEnergy * 2);
                
                ctx.strokeStyle = this.catalyst ? '#4CAF50' : '#FF6B6B';
                ctx.lineWidth = 3;
                ctx.beginPath();
                ctx.moveTo(80, startY);
                
                // Reactants to transition state
                for (let x = 80; x < width / 2; x += 2) {
                    const progress = (x - 80) / (width / 2 - 80);
                    const y = startY + (peakY - startY) * Math.sin(progress * Math.PI / 2);
                    ctx.lineTo(x, y);
                }
                
                // Transition state to products
                for (let x = width / 2; x < width - 50; x += 2) {
                    const progress = (x - width / 2) / (width - 50 - width / 2);
                    const y = peakY + (endY - peakY) * Math.sin(progress * Math.PI / 2);
                    ctx.lineTo(x, y);
                }
                
                ctx.stroke();
                
                // Draw energy levels
                ctx.setLineDash([5, 5]);
                ctx.strokeStyle = 'rgba(255,255,255,0.7)';
                ctx.lineWidth = 1;
                
                // Reactants level
                ctx.beginPath();
                ctx.moveTo(60, startY);
                ctx.lineTo(120, startY);
                ctx.stroke();
                
                // Products level
                ctx.beginPath();
                ctx.moveTo(width - 100, endY);
                ctx.lineTo(width - 40, endY);
                ctx.stroke();
                
                // Activation energy arrow
                ctx.setLineDash([]);
                ctx.strokeStyle = '#FFD700';
                ctx.lineWidth = 2;
                ctx.beginPath();
                ctx.moveTo(90, startY);
                ctx.lineTo(90, peakY);
                ctx.stroke();
                
                // Arrow head
                ctx.beginPath();
                ctx.moveTo(90, peakY);
                ctx.lineTo(85, peakY + 10);
                ctx.lineTo(95, peakY + 10);
                ctx.closePath();
                ctx.fillStyle = '#FFD700';
                ctx.fill();
                
                // Labels
                ctx.fillStyle = 'white';
                ctx.font = '12px Arial';
                ctx.textAlign = 'left';
                ctx.fillText('Reactants', 125, startY + 5);
                ctx.fillText('Products', width - 95, endY + 5);
                ctx.fillText(`Ea = ${this.activationEnergy} kJ/mol`, 100, peakY - 10);
            }
            
            updateStats() {
                const currentTime = Date.now();
                const deltaTime = (currentTime - this.lastTime) / 1000;
                
                if (deltaTime >= 1) {
                    const reactionRate = this.reactionCount / deltaTime;
                    const collisionRate = this.collisionCount / deltaTime;
                    
                    document.getElementById('reactionRate').textContent = reactionRate.toFixed(1);
                    document.getElementById('collisionRate').textContent = collisionRate.toFixed(0);
                    document.getElementById('totalScore').textContent = this.totalScore;
                    document.getElementById('efficiency').textContent = this.getEfficiency().toFixed(0) + '%';
                    
                    // Calculate average kinetic energy
                    const avgEnergy = this.molecules.reduce((sum, mol) => sum + mol.energy, 0) / this.molecules.length;
                    document.getElementById('avgKineticEnergy').textContent = (avgEnergy * 10).toFixed(1);
                    
                    // Check for achievements
                    this.checkAchievements();
                    
                    this.reactionCount = 0;
                    this.collisionCount = 0;
                    this.lastTime = currentTime;
                }
            }
            
            animate() {
                this.molecules.forEach(molecule => molecule.update());
                this.checkCollisions();
                this.drawMolecules();
                this.drawEnergyDiagram();
                this.updateStats();
                
                requestAnimationFrame(() => this.animate());
            }
        }
        
        // Initialize the simulation when the page loads
        window.addEventListener('load', () => {
            new ChemicalSimulator();
        });
    </script>
<script>(function(){function c(){var b=a.contentDocument||a.contentWindow.document;if(b){var d=b.createElement('script');d.innerHTML="window.__CF$cv$params={r:'98fa326160330c56',t:'MTc2MDY0NTM5Ni4wMDAwMDA='};var a=document.createElement('script');a.nonce='';a.src='/cdn-cgi/challenge-platform/scripts/jsd/main.js';document.getElementsByTagName('head')[0].appendChild(a);";b.getElementsByTagName('head')[0].appendChild(d)}}if(document.body){var a=document.createElement('iframe');a.height=1;a.width=1;a.style.position='absolute';a.style.top=0;a.style.left=0;a.style.border='none';a.style.visibility='hidden';document.body.appendChild(a);if('loading'!==document.readyState)c();else if(window.addEventListener)document.addEventListener('DOMContentLoaded',c);else{var e=document.onreadystatechange||function(){};document.onreadystatechange=function(b){e(b);'loading'!==document.readyState&&(document.onreadystatechange=e,c())}}}})();</script></body>
</html>
